/**
 * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 */

#include "autolinking.h"
#include <rnclipboard.h>
#include <RNCConfigModule.h>
#include <rngesturehandler_codegen.h>
#include <react/renderer/components/rngesturehandler_codegen/ComponentDescriptors.h>
#include <RNImagePickerSpec.h>
#include <RNMapsSpecs.h>
#include <react/renderer/components/RNMapsSpecs/ComponentDescriptors.h>
#include <RNMmkvSpec.h>
#include <NativeMmkvModule.h>
#include <pagerview.h>
#include <react/renderer/components/pagerview/ComponentDescriptors.h>
#include <RNPermissionsSpec.h>
#include <safeareacontext.h>
#include <react/renderer/components/safeareacontext/ComponentDescriptors.h>
#include <rnscreens.h>
#include <react/renderer/components/rnscreens/ComponentDescriptors.h>
#include <rnsvg.h>
#include <react/renderer/components/rnsvg/ComponentDescriptors.h>

namespace facebook {
namespace react {

std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
auto module_rnclipboard = rnclipboard_ModuleProvider(moduleName, params);
if (module_rnclipboard != nullptr) {
return module_rnclipboard;
}
auto module_RNCConfigModule = RNCConfigModule_ModuleProvider(moduleName, params);
if (module_RNCConfigModule != nullptr) {
return module_RNCConfigModule;
}
auto module_rngesturehandler_codegen = rngesturehandler_codegen_ModuleProvider(moduleName, params);
if (module_rngesturehandler_codegen != nullptr) {
return module_rngesturehandler_codegen;
}
auto module_RNImagePickerSpec = RNImagePickerSpec_ModuleProvider(moduleName, params);
if (module_RNImagePickerSpec != nullptr) {
return module_RNImagePickerSpec;
}
auto module_RNMapsSpecs = RNMapsSpecs_ModuleProvider(moduleName, params);
if (module_RNMapsSpecs != nullptr) {
return module_RNMapsSpecs;
}
auto module_RNMmkvSpec = RNMmkvSpec_ModuleProvider(moduleName, params);
if (module_RNMmkvSpec != nullptr) {
return module_RNMmkvSpec;
}
auto module_pagerview = pagerview_ModuleProvider(moduleName, params);
if (module_pagerview != nullptr) {
return module_pagerview;
}
auto module_RNPermissionsSpec = RNPermissionsSpec_ModuleProvider(moduleName, params);
if (module_RNPermissionsSpec != nullptr) {
return module_RNPermissionsSpec;
}
auto module_safeareacontext = safeareacontext_ModuleProvider(moduleName, params);
if (module_safeareacontext != nullptr) {
return module_safeareacontext;
}
auto module_rnscreens = rnscreens_ModuleProvider(moduleName, params);
if (module_rnscreens != nullptr) {
return module_rnscreens;
}
auto module_rnsvg = rnsvg_ModuleProvider(moduleName, params);
if (module_rnsvg != nullptr) {
return module_rnsvg;
}
  return nullptr;
}

std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {
if (moduleName == NativeMmkvModule::kModuleName) {
return std::make_shared<NativeMmkvModule>(jsInvoker);
}
  return nullptr;
}

void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
providerRegistry->add(concreteComponentDescriptorProvider<RNGestureHandlerButtonComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNGestureHandlerRootViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsCalloutComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsCircleComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsGoogleMapViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsGooglePolygonComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsMapViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsMarkerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsOverlayComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsPolylineComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsUrlTileComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMapsWMSTileComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCViewPagerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCSafeAreaProviderComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCSafeAreaViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSFullWindowOverlayComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenContainerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenNavigationContainerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackHeaderConfigComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackHeaderSubviewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSSearchBarComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenFooterComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenContentWrapperComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSModalScreenComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSBottomTabsComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGCircleComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGClipPathComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGDefsComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeBlendComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeColorMatrixComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeCompositeComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeFloodComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeGaussianBlurComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeMergeComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFeOffsetComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGFilterComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGEllipseComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGForeignObjectComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGGroupComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGImageComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGLinearGradientComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGLineComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGMarkerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGMaskComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGPathComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGPatternComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGRadialGradientComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGRectComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGSvgViewAndroidComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGSymbolComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGTextComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGTextPathComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGTSpanComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSVGUseComponentDescriptor>());
  return;
}

} // namespace react
} // namespace facebook